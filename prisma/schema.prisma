generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRO_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_PRO_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  CLIENT
  DESIGNER
}

enum ProposalListingStatus {
  ACTIVE
  INACTIVE
}

model User {
  id         Int       @id @default(autoincrement())
  clerkId    String    @unique
  createdAt  DateTime  @default(now())
  role       Role
  country    String
  postalCode String
  designer   Designer?
  client     Client?
  messages   Message[]
}

model Designer {
  id                  Int                  @id @default(autoincrement())
  userId              Int                  @unique
  collaboration       Collaboration?
  designerInformation DesignerInformation?
  interestedInListings DesignerListing[]
  user                User                 @relation(fields: [id], references: [id], onDelete: Cascade)
}

model DesignerInformation {
  id                Int      @id @default(autoincrement())
  designerId        Int      @unique
  university        String
  yearsOfExperience Int
  portfolio         String
  designer          Designer @relation(fields: [designerId], references: [id], onDelete: Cascade)
}

model Client {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  clientInformation ClientInformation?
  proposal          Proposal?
  listings          ProposalListing?
  collaboration     Collaboration[]
  user              User               @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ClientInformation {
  id                  Int      @id @default(autoincrement())
  clientId            Int      @unique
  companyName         String
  companyWebsite      String
  companyDescription  String
  companyIndustry     String[]
  companySize         String
  companyRegistration String
  client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Proposal {
  id                 Int      @id @default(autoincrement())
  clientId           Int      @unique
  createdAt          DateTime @default(now())
  proposalListing    ProposalListing?
  brief              String
  websiteUse         String
  websiteLacking     String
  websiteFeatures    String
  websiteNiceToHave  String
  targetGroup        String
  competitorAnalysis String
  files              String[]

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model ProposalListing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  views              Int      @default(0)
  interestedDesigners DesignerListing[]
  clientId           Int      @unique
  proposalId Int    @unique
  status             ProposalListingStatus @default(ACTIVE)
  client     Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  proposal  Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}
model DesignerListing {
  createdAt DateTime @default(now())
  designerId Int      
  proposalId Int      
  designer   Designer @relation(fields: [designerId], references: [id], onDelete: Cascade)
  proposalListing ProposalListing @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@id([designerId, proposalId])
}

model Question {
  id       Int    @id @default(autoincrement())
  title    String
  question String
  toolTip  String
}

model Collaboration {
  id           Int    @id @default(autoincrement())
  designerId   Int    @unique
  clientId     Int    @unique
  chatId       Int    @unique
  status       String
  progress     String
  linkToDesign String

  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  designer Designer @relation(fields: [designerId], references: [id])
  chat     Chat     @relation(fields: [chatId], references: [id])
}

model Chat {
  id            Int            @id @default(autoincrement())
  messages      Message[]
  collaboration Collaboration?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  chatId    Int
  senderId  Int
  text      String

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}
